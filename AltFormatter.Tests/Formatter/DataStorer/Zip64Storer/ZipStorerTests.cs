/*
 * AltFormatter.
 * Licensed under MIT License.
 * Copyright © 2017 Pavel Chaimardanov.
 */
using AltFormatter.Utils;
using NUnit.Framework;
using System;
using System.Collections.Generic;
using System.Linq;

namespace AltFormatter.Formatter
{
	internal sealed partial class ZipStorerTests
	{
		private const string filePath1 = "File.txt";
		
		private const string filePath2 = "File/File.txt";
		
		private static readonly byte[] fileData = ("With tenure, Suzie’d have all the more leisure for yachting, but her publications are no good.").GetBytes();
		
		private static readonly byte[] zip32Empty = {0x50, 0x4B, 0x05, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

		private static readonly byte[] zip32OneFileStore = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0xA5, 0x5B, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0xA5, 0x5B, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x36, 0x0, 0x0, 0x0, 0x86, 0x0, 0x0, 0x0, 0x0, 0x0};
		
		private static readonly byte[] zip32OneFileDeflate = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xD5, 0x5B, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xD5, 0x5B, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x1, 0x0, 0x36, 0x0, 0x0, 0x0, 0x7C, 0x0, 0x0, 0x0, 0x0, 0x0};
		
		private static readonly byte[] zip32TwoFilesStore = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x4C, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x4C, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x4C, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x4C, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x86, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x71, 0x0, 0x0, 0x0, 0x11, 0x1, 0x0, 0x0, 0x0, 0x0};
		
		private static readonly byte[] zip32TwoFilesDeflate = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xB6, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xB6, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xB6, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0xB6, 0x5C, 0x30, 0x52, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x7C, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x2, 0x0, 0x71, 0x0, 0x0, 0x0, 0xFD, 0x0, 0x0, 0x0, 0x0, 0x0};
		
		private static readonly byte[] zip64Empty = {0x50, 0x4B, 0x6, 0x6, 0x2C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0};
		
		private static readonly byte[] zip64OneFileStore = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x6, 0x2C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0xFC, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0};
		
		private static readonly byte[] zip64OneFileDeflate = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x6, 0x2C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0xF2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0};
		
		private static readonly byte[] zip64TwoFilesStore = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x57, 0x69, 0x74, 0x68, 0x20, 0x74, 0x65, 0x6E, 0x75, 0x72, 0x65, 0x2C, 0x20, 0x53, 0x75, 0x7A, 0x69, 0x65, 0xE2, 0x80, 0x99, 0x64, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x61, 0x6C, 0x6C, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6D, 0x6F, 0x72, 0x65, 0x20, 0x6C, 0x65, 0x69, 0x73, 0x75, 0x72, 0x65, 0x20, 0x66, 0x6F, 0x72, 0x20, 0x79, 0x61, 0x63, 0x68, 0x74, 0x69, 0x6E, 0x67, 0x2C, 0x20, 0x62, 0x75, 0x74, 0x20, 0x68, 0x65, 0x72, 0x20, 0x70, 0x75, 0x62, 0x6C, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x73, 0x20, 0x61, 0x72, 0x65, 0x20, 0x6E, 0x6F, 0x20, 0x67, 0x6F, 0x6F, 0x64, 0x2E, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x0, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x60, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0xA6, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xA6, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x6, 0x2C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x51, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0x2, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0};
		
		private static readonly byte[] zip64TwoFilesDeflate = {0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x3, 0x4, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x20, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xD, 0xCA, 0xB1, 0xD, 0x80, 0x30, 0xC, 0x4, 0xC0, 0x55, 0x7E, 0x0, 0xC4, 0x32, 0x14, 0xD4, 0x86, 0x18, 0x6C, 0x29, 0xC4, 0x28, 0xD8, 0x48, 0x50, 0xB1, 0x6, 0xEB, 0x31, 0x9, 0xB9, 0xFA, 0x46, 0x75, 0x81, 0x73, 0x89, 0xCA, 0x1D, 0x86, 0xB8, 0x95, 0xBF, 0xE7, 0x4D, 0x10, 0x3A, 0x19, 0x94, 0x33, 0x5C, 0x18, 0x9B, 0x55, 0x46, 0x66, 0x3D, 0x5A, 0xC2, 0x62, 0x15, 0x17, 0xCD, 0xE2, 0x5A, 0xD6, 0xE, 0x53, 0x38, 0x84, 0x2B, 0xF6, 0x98, 0xB2, 0xCE, 0xE4, 0x6A, 0xE5, 0x0, 0xB5, 0x56, 0xC, 0xAB, 0x59, 0xEA, 0x7F, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x8, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x1, 0x2, 0x17, 0xB, 0x14, 0x0, 0x0, 0x8, 0x8, 0x0, 0x40, 0x83, 0x74, 0x51, 0xAC, 0x1C, 0x78, 0x52, 0x56, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0xD, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x81, 0x0, 0x0, 0x9C, 0x0, 0x0, 0x0, 0x46, 0x69, 0x6C, 0x65, 0x2F, 0x46, 0x69, 0x6C, 0x65, 0x2E, 0x74, 0x78, 0x74, 0x1, 0x0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x60, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x56, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x9C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x6, 0x2C, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2D, 0x0, 0x2D, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x2, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x3D, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x6, 0x7, 0x0, 0x0, 0x0, 0x0, 0xEE, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x50, 0x4B, 0x5, 0x6, 0x0, 0x0, 0x0, 0x0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0x0, 0x0};

		private sealed class InvalidZipEntry : IDataStorerEntry
		{
			public string Path { get; set; }
		}
		
		private void ZipReadOnlyStorer_OneFile_Test(bool isZip64, bool enableCompression, Func<ZipReadOnlyStorerEntry, object> selectValue, object value)
    	{
    		byte[] data = null;    		
    		
    		if(isZip64)
    		{
    			data = enableCompression ? zip64OneFileDeflate : zip64OneFileStore;
    		}
    		else
    		{
    			data = enableCompression ? zip32OneFileDeflate : zip32OneFileStore;
    		}
    		
    		IReadOnlyDataStorer storer = ZipReadOnlyStorer.FromData(data);
    		
    		ZipReadOnlyStorerEntry entry = storer.Entries.FindOrDefault(e => e.Path == filePath1) as ZipReadOnlyStorerEntry;
    		
    		Assert.AreEqual(value, selectValue(entry));
    	}
		
		
		private void ZipReadOnlyStorer_OneFile_Test(bool isZip64, bool enableCompression)
    	{
    		byte[] data = null;
    		
    		if(isZip64)
    		{
    			data = enableCompression ? zip64OneFileDeflate : zip64OneFileStore;
    		}
    		else
    		{
    			data = enableCompression ? zip32OneFileDeflate : zip32OneFileStore;
    		}
    		
    		IReadOnlyDataStorer storer = ZipReadOnlyStorer.FromData(data);
    		
    		ZipReadOnlyStorerEntry entry = storer.Entries.FindOrDefault(e => e.Path == filePath1) as ZipReadOnlyStorerEntry;
    		
    		Assert.NotNull(fileData.SequenceEqual(storer.Read(entry)));
    	}
		
		private void ZipReadOnlyStorer_TwoFiles_Test(bool isZip64, bool enableCompression)
    	{
    		byte[] data = null;
    		
    		if(isZip64)
    		{
    			data = enableCompression ? zip64TwoFilesDeflate : zip64TwoFilesStore;
    		}
    		else
    		{
    			data = enableCompression ? zip32TwoFilesDeflate : zip32TwoFilesStore;
    		}
    		
    		IReadOnlyDataStorer storer = ZipReadOnlyStorer.FromData(data);
    		
    		IReadOnlyList<IDataStorerEntry> entries = storer.Entries;
    		ZipReadOnlyStorerEntry entry1 = entries.FindOrDefault(e => e.Path == filePath1) as ZipReadOnlyStorerEntry;
    		ZipReadOnlyStorerEntry entry2 = entries.FindOrDefault(e => e.Path == filePath2) as ZipReadOnlyStorerEntry;
    		
    		Assert.NotNull(fileData.SequenceEqual(storer.Read(entry1)));
    		Assert.NotNull(fileData.SequenceEqual(storer.Read(entry2)));
    	}
		
		private void ZipWriteOnlyStorer_ZipDataEquality_Test(byte[] data1, byte[] data2, int filesCount)
		{
			Assert.AreEqual(data1.Length, data2.Length);
			
			// Saved and created array of the bytes have different bytes
			// that associated with the data and time
			// (x4 bytes, x1 per LFH + 1x per CDFH = x8 bytes total per one entry)
			int maxDifference = 4 * 2 * filesCount;
			
			int length = data1.Length;
			int count = 0;
			for(int i = 0; i < length; i++)
			{
				if(data1[i] == data2[i])
				{
					count++;
				}
			}
			
			Assert.True(count >= length - maxDifference);
		}
	}
}